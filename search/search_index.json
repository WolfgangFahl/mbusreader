{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mbusreader API Documentation","text":""},{"location":"#mbusread.i18n","title":"<code>i18n</code>","text":"<p>Created on 2025-01-22</p> <p>@author: wf</p>"},{"location":"#mbusread.i18n.I18n","title":"<code>I18n</code>","text":"<p>Simple internationalization class for message handling</p> Source code in <code>mbusread/i18n.py</code> <pre><code>class I18n:\n    \"\"\"\n    Simple internationalization class for message handling\n    \"\"\"\n\n    MESSAGES = {\n        \"en\": {\n            \"using_test_data\": \"Using test data...\",\n            \"reading_data\": \"Reading data\",\n            \"no_data_received\": \"No data received from serial port.\",\n            \"read_data_hex\": \"Read data (hex): {}\",\n            \"serial_error\": \"Serial communication error in {}: {}\",\n            \"wake_up_started\": \"Wake-up sequence started ...\",\n            \"wake_up_complete\": \"Wake-up sequence completed\",\n            \"sending_request\": \"Sending M-Bus request...\",\n            \"response_received\": \"Response received: {}\",\n        },\n        \"de\": {\n            \"using_test_data\": \"Verwende Testdaten...\",\n            \"reading_data\": \"Daten lesen\",\n            \"no_data_received\": \"Keine Daten vom seriellen Port empfangen.\",\n            \"read_data_hex\": \"gelesene Daten (hex): {}\",\n            \"serial_error\": \"Fehler bei der seriellen Kommunikation in {}: {}\",\n            \"wake_up_started\": \"Aufwecksequenz gestartet ...\",\n            \"wake_up_complete\": \"Aufwecksequenz abgeschlossen\",\n            \"sending_request\": \"Sende M-Bus Anfrage...\",\n            \"response_received\": \"Antwort empfangen: {}\",\n        },\n    }\n\n    def __init__(self, language: str = \"en\"):\n        self.language = language if language in self.MESSAGES else \"en\"\n\n    def get(self, key: str, *args) -&gt; str:\n        \"\"\"Get localized message with optional formatting\"\"\"\n        message = self.MESSAGES[self.language].get(key, key)\n        return message.format(*args) if args else message\n</code></pre>"},{"location":"#mbusread.i18n.I18n.get","title":"<code>get(key, *args)</code>","text":"<p>Get localized message with optional formatting</p> Source code in <code>mbusread/i18n.py</code> <pre><code>def get(self, key: str, *args) -&gt; str:\n    \"\"\"Get localized message with optional formatting\"\"\"\n    message = self.MESSAGES[self.language].get(key, key)\n    return message.format(*args) if args else message\n</code></pre>"},{"location":"#mbusread.mbus_config","title":"<code>mbus_config</code>","text":"<p>Created on 2025-01-22</p> <p>@author: wf</p>"},{"location":"#mbusread.mbus_config.Device","title":"<code>Device</code>","text":"<p>A device class for M-Bus devices storing manufacturer reference</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@lod_storable\nclass Device:\n    \"\"\"\n    A device class for M-Bus devices storing manufacturer reference\n    \"\"\"\n\n    mid: str  # manufacturer id reference\n    model: str\n    title: str = \"\"  # Optional full product title\n    url: str = \"\"  # optional device url\n    doc_url: str = \"\"  # Documentation URL\n    # manufacturer: Manufacturer - set on relink\n\n    def as_html(self) -&gt; str:\n        title = self.title if self.title else self.model\n        device_link = (\n            Link.create(url=self.url, text=title, target=\"_blank\")\n            if self.doc_url\n            else title\n        )\n        doc_link = (\n            Link.create(url=self.doc_url, text=\"\ud83d\udcc4\", target=\"_blank\")\n            if self.doc_url\n            else \"\"\n        )\n        mfr_html = (\n            self.manufacturer.as_html() if hasattr(self, \"manufacturer\") else self.mid\n        )\n        return f\"{mfr_html} \u2192 {device_link}{doc_link}\"\n</code></pre>"},{"location":"#mbusread.mbus_config.MBusConfig","title":"<code>MBusConfig</code>  <code>dataclass</code>","text":"<p>Configuration data class for M-Bus reader</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@dataclass\nclass MBusConfig:\n    \"\"\"Configuration data class for M-Bus reader\"\"\"\n\n    serial_device: str = \"/dev/ttyUSB0\"\n    baudrate: int = 2400\n    timeout: float = 10.0\n    debug: bool = False\n    language: str = \"en\"\n</code></pre>"},{"location":"#mbusread.mbus_config.MBusExample","title":"<code>MBusExample</code>","text":"<p>An M-Bus example storing device reference</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@lod_storable\nclass MBusExample:\n    \"\"\"\n    An M-Bus example storing device reference\n    \"\"\"\n\n    did: str  # device id reference\n    name: str\n    title: str\n    hex: str\n    valid: bool = False\n    # device: Device - set on relink\n\n    def as_html(self) -&gt; str:\n        device_html = self.device.as_html() if hasattr(self, \"device\") else self.did\n        example_text = f\"{self.name}: {self.title}\" if self.title else self.name\n        return f\"{device_html} \u2192 {example_text}\"\n</code></pre>"},{"location":"#mbusread.mbus_config.MBusExamples","title":"<code>MBusExamples</code>","text":"<p>Manages M-Bus devices and their examples with separate dictionaries for manufacturers, devices and examples</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@lod_storable\nclass MBusExamples:\n    \"\"\"\n    Manages M-Bus devices and their examples with separate dictionaries for\n    manufacturers, devices and examples\n    \"\"\"\n\n    manufacturers: Dict[str, Manufacturer] = field(default_factory=dict)\n    devices: Dict[str, Device] = field(default_factory=dict)\n    examples: Dict[str, MBusExample] = field(default_factory=dict)\n\n    @classmethod\n    def get(cls, yaml_path: str = None) -&gt; \"MBusExamples\":\n        \"\"\"\n        Load and dereference M-Bus examples from YAML\n\n        Args:\n            yaml_path: Path to YAML file (defaults to examples_path/mbus_examples.yaml)\n\n        Returns:\n            MBusExamples instance with dereferenced objects\n        \"\"\"\n        if yaml_path is None:\n            yaml_path = cls.examples_path() + \"/mbus_examples.yaml\"\n\n        # Load raw YAML data\n        mbus_examples = cls.load_from_yaml_file(yaml_path)\n        mbus_examples.relink()\n        return mbus_examples\n\n    def relink(self):\n        \"\"\"\n        Reestablish object references between manufacturers, devices and examples\n        \"\"\"\n        # Dereference manufacturers in devices\n        for device_id, device in self.devices.items():\n            if device.mid in self.manufacturers:\n                device.manufacturer = self.manufacturers[device.mid]\n            else:\n                raise KeyError(\n                    f\"Manufacturer '{device.mid}' not found for device '{device_id}'\"\n                )\n\n        # Dereference devices in examples\n        for example_id, example in self.examples.items():\n            if example.did in self.devices:\n                example.device = self.devices[example.did]\n            else:\n                raise KeyError(\n                    f\"Device '{example.did}' not found for example '{example_id}'\"\n                )\n\n    @classmethod\n    def examples_path(cls) -&gt; str:\n        # the root directory (default: examples)\n        path = os.path.join(os.path.dirname(__file__), \"../mbusread_examples\")\n        path = os.path.abspath(path)\n        return path\n</code></pre>"},{"location":"#mbusread.mbus_config.MBusExamples.get","title":"<code>get(yaml_path=None)</code>  <code>classmethod</code>","text":"<p>Load and dereference M-Bus examples from YAML</p> <p>Parameters:</p> Name Type Description Default <code>yaml_path</code> <code>str</code> <p>Path to YAML file (defaults to examples_path/mbus_examples.yaml)</p> <code>None</code> <p>Returns:</p> Type Description <code>MBusExamples</code> <p>MBusExamples instance with dereferenced objects</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@classmethod\ndef get(cls, yaml_path: str = None) -&gt; \"MBusExamples\":\n    \"\"\"\n    Load and dereference M-Bus examples from YAML\n\n    Args:\n        yaml_path: Path to YAML file (defaults to examples_path/mbus_examples.yaml)\n\n    Returns:\n        MBusExamples instance with dereferenced objects\n    \"\"\"\n    if yaml_path is None:\n        yaml_path = cls.examples_path() + \"/mbus_examples.yaml\"\n\n    # Load raw YAML data\n    mbus_examples = cls.load_from_yaml_file(yaml_path)\n    mbus_examples.relink()\n    return mbus_examples\n</code></pre>"},{"location":"#mbusread.mbus_config.MBusExamples.relink","title":"<code>relink()</code>","text":"<p>Reestablish object references between manufacturers, devices and examples</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>def relink(self):\n    \"\"\"\n    Reestablish object references between manufacturers, devices and examples\n    \"\"\"\n    # Dereference manufacturers in devices\n    for device_id, device in self.devices.items():\n        if device.mid in self.manufacturers:\n            device.manufacturer = self.manufacturers[device.mid]\n        else:\n            raise KeyError(\n                f\"Manufacturer '{device.mid}' not found for device '{device_id}'\"\n            )\n\n    # Dereference devices in examples\n    for example_id, example in self.examples.items():\n        if example.did in self.devices:\n            example.device = self.devices[example.did]\n        else:\n            raise KeyError(\n                f\"Device '{example.did}' not found for example '{example_id}'\"\n            )\n</code></pre>"},{"location":"#mbusread.mbus_config.Manufacturer","title":"<code>Manufacturer</code>","text":"<p>A manufacturer of M-Bus devices</p> Source code in <code>mbusread/mbus_config.py</code> <pre><code>@lod_storable\nclass Manufacturer:\n    \"\"\"\n    A manufacturer of M-Bus devices\n    \"\"\"\n\n    name: str\n    url: str\n    country: str = \"Germany\"  # Most M-Bus manufacturers are German\n\n    def as_html(self) -&gt; str:\n        return (\n            Link.create(url=self.url, text=self.name, target=\"_blank\")\n            if self.url\n            else self.name\n        )\n</code></pre>"},{"location":"#mbusread.mbus_parser","title":"<code>mbus_parser</code>","text":"<p>Created on 2025-01-22</p> <p>@author: wf</p>"},{"location":"#mbusread.mbus_parser.MBusParser","title":"<code>MBusParser</code>","text":"<p>parse MBus data</p> Source code in <code>mbusread/mbus_parser.py</code> <pre><code>class MBusParser:\n    \"\"\"\n    parse MBus data\n    \"\"\"\n\n    def __init__(self, debug: bool = False):\n        # Define example messages\n        self.debug = debug\n        self.examples = MBusExamples.get().examples\n\n    def fromhex(self, x, base=16):\n        \"\"\"Convert hex string to integer\"\"\"\n        return int(x, base)\n\n    def get_frame_json(self, frame):\n        \"\"\"Fallback JSON generation if to_JSON not available\"\"\"\n        if hasattr(frame, \"to_JSON\"):\n            return frame.to_JSON()\n        # Fallback to basic frame info\n        data = {\n            \"header\": {\n                \"start\": frame.header.startField.parts[0],\n                \"length\": len(frame.body.bodyHeader.ci_field.parts) + 2,\n                \"control\": frame.header.cField.parts[0],\n                \"address\": frame.header.aField.parts[0],\n            },\n            \"body\": {\"ci_field\": frame.body.bodyHeader.ci_field.parts[0]},\n        }\n        return json.dumps(data)\n\n    def parse_mbus_frame(self, hex_data):\n        \"\"\"\n        Parse M-Bus hex data and return mbus frame\n        Returns tuple of (error_msg, mbus_frame)\n        \"\"\"\n        frame = None\n        error_msg = None\n        try:\n            # Allow flexible whitespace in input\n            filtered_data = \"\".join(char for char in hex_data if char.isalnum())\n            # Convert hex string to bytes\n            data = list(map(self.fromhex, re.findall(\"..\", filtered_data)))\n            # Parse using meterbus\n            frame = meterbus.load(data)\n        except Exception as ex:\n            error_type = type(ex).__name__\n            error_msg = f\"Error parsing M-Bus data: {error_type}: {str(ex)}\"\n            if self.debug:\n                traceback.format_exception(ex)\n                pass\n        return error_msg, frame\n</code></pre>"},{"location":"#mbusread.mbus_parser.MBusParser.fromhex","title":"<code>fromhex(x, base=16)</code>","text":"<p>Convert hex string to integer</p> Source code in <code>mbusread/mbus_parser.py</code> <pre><code>def fromhex(self, x, base=16):\n    \"\"\"Convert hex string to integer\"\"\"\n    return int(x, base)\n</code></pre>"},{"location":"#mbusread.mbus_parser.MBusParser.get_frame_json","title":"<code>get_frame_json(frame)</code>","text":"<p>Fallback JSON generation if to_JSON not available</p> Source code in <code>mbusread/mbus_parser.py</code> <pre><code>def get_frame_json(self, frame):\n    \"\"\"Fallback JSON generation if to_JSON not available\"\"\"\n    if hasattr(frame, \"to_JSON\"):\n        return frame.to_JSON()\n    # Fallback to basic frame info\n    data = {\n        \"header\": {\n            \"start\": frame.header.startField.parts[0],\n            \"length\": len(frame.body.bodyHeader.ci_field.parts) + 2,\n            \"control\": frame.header.cField.parts[0],\n            \"address\": frame.header.aField.parts[0],\n        },\n        \"body\": {\"ci_field\": frame.body.bodyHeader.ci_field.parts[0]},\n    }\n    return json.dumps(data)\n</code></pre>"},{"location":"#mbusread.mbus_parser.MBusParser.parse_mbus_frame","title":"<code>parse_mbus_frame(hex_data)</code>","text":"<p>Parse M-Bus hex data and return mbus frame Returns tuple of (error_msg, mbus_frame)</p> Source code in <code>mbusread/mbus_parser.py</code> <pre><code>def parse_mbus_frame(self, hex_data):\n    \"\"\"\n    Parse M-Bus hex data and return mbus frame\n    Returns tuple of (error_msg, mbus_frame)\n    \"\"\"\n    frame = None\n    error_msg = None\n    try:\n        # Allow flexible whitespace in input\n        filtered_data = \"\".join(char for char in hex_data if char.isalnum())\n        # Convert hex string to bytes\n        data = list(map(self.fromhex, re.findall(\"..\", filtered_data)))\n        # Parse using meterbus\n        frame = meterbus.load(data)\n    except Exception as ex:\n        error_type = type(ex).__name__\n        error_msg = f\"Error parsing M-Bus data: {error_type}: {str(ex)}\"\n        if self.debug:\n            traceback.format_exception(ex)\n            pass\n    return error_msg, frame\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd","title":"<code>mbus_reader_cmd</code>","text":""},{"location":"#mbusread.mbus_reader_cmd.MBusReader","title":"<code>MBusReader</code>","text":"<p>Reader for Meter Bus data</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>class MBusReader:\n    \"\"\"Reader for Meter Bus data\"\"\"\n\n    def __init__(self, config: Optional[MBusConfig] = None):\n        \"\"\"\n        Initialize MBusReader with configuration\n        \"\"\"\n        self.config = config or MBusConfig()\n        self.i18n = I18n(self.config.language)\n        self.logger = self._setup_logger()\n        self.ser = self._setup_serial()\n\n    def _setup_logger(self) -&gt; logging.Logger:\n        \"\"\"Configure logging\"\"\"\n        logger = logging.getLogger(\"MBusReader\")\n        if self.config.debug:\n            logger.setLevel(logging.DEBUG)\n        handler = logging.StreamHandler()\n        formatter = logging.Formatter(\n            \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n        )\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        return logger\n\n    def _setup_serial(self) -&gt; serial.Serial:\n        \"\"\"Initialize serial connection\"\"\"\n        return serial.Serial(\n            port=self.config.serial_device,\n            baudrate=self.config.baudrate,\n            bytesize=8,\n            parity=serial.PARITY_NONE,\n            stopbits=1,\n            timeout=self.config.timeout,\n        )\n\n    def ser_write(self, msg: bytes, info: str) -&gt; None:\n        \"\"\"\n        Writes a message to the serial port and validates the echo.\n\n        Args:\n            msg (bytes): The message to write as a byte string.\n            info (str): The log message key for identifying the operation.\n\n        Logs:\n            A warning if the echo does not match the sent message.\n            A debug message if the echo matches.\n        \"\"\"\n        self.logger.info(self.i18n.get(info))\n        self.ser.write(msg)\n        self.ser.flush()\n\n        # Check and validate echo\n        echo = self.ser.read(len(msg))\n        if echo != msg:\n            self.logger.warning(f\"Echo mismatch! Sent: {msg}, Received: {echo}\")\n        else:\n            self.logger.debug(f\"Echo matched: {echo}\")\n\n    def wake_up(\n        self, pattern: bytes = b\"\\x55\", times: int = 528, sleep_time: float = 0.350\n    ) -&gt; None:\n        \"\"\"Perform the wakeup sequence\"\"\"\n        try:\n            self.ser_write(pattern * times, \"wake_up_started\")\n            time.sleep(sleep_time)\n            self.ser.parity = serial.PARITY_EVEN\n            self.logger.info(self.i18n.get(\"wake_up_complete\"))\n        except serial.SerialException as e:\n            self.logger.error(self.i18n.get(\"serial_error\", \"wake_up\", str(e)))\n\n    def get_data(self, test_data: Optional[bytes] = None) -&gt; Optional[bytes]:\n        \"\"\"\n        Get data from the M-Bus device or use test data\n        \"\"\"\n        if test_data:\n            self.logger.info(self.i18n.get(\"using_test_data\"))\n            return test_data\n\n        try:\n            # Wake up sequence\n            self.wake_up()\n\n            # Send read request\n            read_data = b\"\\x10\\x5B\\xFE\\x59\\x16\"\n            self.ser_write(read_data, \"reading_data\")\n\n            # Read response\n            result = self.ser.read(620)\n            if not result:\n                self.logger.warning(self.i18n.get(\"no_data_received\"))\n                return None\n\n            # Log hex data\n            byte_array_hex = binascii.hexlify(result)\n            self.logger.info(self.i18n.get(\"read_data_hex\", byte_array_hex.decode()))\n            return result\n\n        except serial.SerialException as e:\n            self.logger.error(self.i18n.get(\"serial_error\", \"get_data\", str(e)))\n            return None\n\n    def send_mbus_request(self) -&gt; None:\n        \"\"\"Send an M-Bus request to the device\"\"\"\n        try:\n            request = b\"\\x68\\x03\\x03\\x68\\x53\\xFE\\xA6\\xF7\\x16\"\n            self.logger.info(self.i18n.get(\"sending_request\"))\n            self.ser.write(request)\n        except serial.SerialException as e:\n            self.logger.error(\n                self.i18n.get(\"serial_error\", \"send_mbus_request\", str(e))\n            )\n\n    def read_response(self, buffer_size: int = 256) -&gt; Optional[bytes]:\n        \"\"\"Read the response from the device\"\"\"\n        try:\n            response = self.ser.read(buffer_size)\n            if response:\n                hex_response = \" \".join(format(b, \"02x\") for b in response)\n                self.logger.info(self.i18n.get(\"response_received\", hex_response))\n                return response\n            return None\n        except serial.SerialException as e:\n            self.logger.error(self.i18n.get(\"serial_error\", \"read_response\", str(e)))\n            return None\n\n    def close(self) -&gt; None:\n        \"\"\"Close the serial connection\"\"\"\n        if self.ser and self.ser.is_open:\n            self.ser.close()\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.__init__","title":"<code>__init__(config=None)</code>","text":"<p>Initialize MBusReader with configuration</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def __init__(self, config: Optional[MBusConfig] = None):\n    \"\"\"\n    Initialize MBusReader with configuration\n    \"\"\"\n    self.config = config or MBusConfig()\n    self.i18n = I18n(self.config.language)\n    self.logger = self._setup_logger()\n    self.ser = self._setup_serial()\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.close","title":"<code>close()</code>","text":"<p>Close the serial connection</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"Close the serial connection\"\"\"\n    if self.ser and self.ser.is_open:\n        self.ser.close()\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.get_data","title":"<code>get_data(test_data=None)</code>","text":"<p>Get data from the M-Bus device or use test data</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def get_data(self, test_data: Optional[bytes] = None) -&gt; Optional[bytes]:\n    \"\"\"\n    Get data from the M-Bus device or use test data\n    \"\"\"\n    if test_data:\n        self.logger.info(self.i18n.get(\"using_test_data\"))\n        return test_data\n\n    try:\n        # Wake up sequence\n        self.wake_up()\n\n        # Send read request\n        read_data = b\"\\x10\\x5B\\xFE\\x59\\x16\"\n        self.ser_write(read_data, \"reading_data\")\n\n        # Read response\n        result = self.ser.read(620)\n        if not result:\n            self.logger.warning(self.i18n.get(\"no_data_received\"))\n            return None\n\n        # Log hex data\n        byte_array_hex = binascii.hexlify(result)\n        self.logger.info(self.i18n.get(\"read_data_hex\", byte_array_hex.decode()))\n        return result\n\n    except serial.SerialException as e:\n        self.logger.error(self.i18n.get(\"serial_error\", \"get_data\", str(e)))\n        return None\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.read_response","title":"<code>read_response(buffer_size=256)</code>","text":"<p>Read the response from the device</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def read_response(self, buffer_size: int = 256) -&gt; Optional[bytes]:\n    \"\"\"Read the response from the device\"\"\"\n    try:\n        response = self.ser.read(buffer_size)\n        if response:\n            hex_response = \" \".join(format(b, \"02x\") for b in response)\n            self.logger.info(self.i18n.get(\"response_received\", hex_response))\n            return response\n        return None\n    except serial.SerialException as e:\n        self.logger.error(self.i18n.get(\"serial_error\", \"read_response\", str(e)))\n        return None\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.send_mbus_request","title":"<code>send_mbus_request()</code>","text":"<p>Send an M-Bus request to the device</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def send_mbus_request(self) -&gt; None:\n    \"\"\"Send an M-Bus request to the device\"\"\"\n    try:\n        request = b\"\\x68\\x03\\x03\\x68\\x53\\xFE\\xA6\\xF7\\x16\"\n        self.logger.info(self.i18n.get(\"sending_request\"))\n        self.ser.write(request)\n    except serial.SerialException as e:\n        self.logger.error(\n            self.i18n.get(\"serial_error\", \"send_mbus_request\", str(e))\n        )\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.ser_write","title":"<code>ser_write(msg, info)</code>","text":"<p>Writes a message to the serial port and validates the echo.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>bytes</code> <p>The message to write as a byte string.</p> required <code>info</code> <code>str</code> <p>The log message key for identifying the operation.</p> required Logs <p>A warning if the echo does not match the sent message. A debug message if the echo matches.</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def ser_write(self, msg: bytes, info: str) -&gt; None:\n    \"\"\"\n    Writes a message to the serial port and validates the echo.\n\n    Args:\n        msg (bytes): The message to write as a byte string.\n        info (str): The log message key for identifying the operation.\n\n    Logs:\n        A warning if the echo does not match the sent message.\n        A debug message if the echo matches.\n    \"\"\"\n    self.logger.info(self.i18n.get(info))\n    self.ser.write(msg)\n    self.ser.flush()\n\n    # Check and validate echo\n    echo = self.ser.read(len(msg))\n    if echo != msg:\n        self.logger.warning(f\"Echo mismatch! Sent: {msg}, Received: {echo}\")\n    else:\n        self.logger.debug(f\"Echo matched: {echo}\")\n</code></pre>"},{"location":"#mbusread.mbus_reader_cmd.MBusReader.wake_up","title":"<code>wake_up(pattern=b'U', times=528, sleep_time=0.35)</code>","text":"<p>Perform the wakeup sequence</p> Source code in <code>mbusread/mbus_reader_cmd.py</code> <pre><code>def wake_up(\n    self, pattern: bytes = b\"\\x55\", times: int = 528, sleep_time: float = 0.350\n) -&gt; None:\n    \"\"\"Perform the wakeup sequence\"\"\"\n    try:\n        self.ser_write(pattern * times, \"wake_up_started\")\n        time.sleep(sleep_time)\n        self.ser.parity = serial.PARITY_EVEN\n        self.logger.info(self.i18n.get(\"wake_up_complete\"))\n    except serial.SerialException as e:\n        self.logger.error(self.i18n.get(\"serial_error\", \"wake_up\", str(e)))\n</code></pre>"},{"location":"#mbusread.mbus_viewer","title":"<code>mbus_viewer</code>","text":"<p>Created on 2025-01-22</p> <p>@author: wf</p>"},{"location":"#mbusread.mbus_viewer.MBusViewer","title":"<code>MBusViewer</code>","text":"<p>               Bases: <code>MBusParser</code></p> <p>Meterbus message viewer with JSON editor support</p> Source code in <code>mbusread/mbus_viewer.py</code> <pre><code>class MBusViewer(MBusParser):\n    \"\"\"\n    Meterbus message viewer with JSON editor support\n    \"\"\"\n\n    def __init__(self, solution=None):\n        super().__init__()\n        self.solution = solution\n        self.hex_input = None\n        self.json_code = None\n        self.example_select = None\n        self.error_html = None\n\n    def createTextArea(self, label, placeholder=None, classes: str = \"h-64\"):\n        \"\"\"Create a standardized textarea with common styling\"\"\"\n        textarea = (\n            ui.textarea(label=label, placeholder=placeholder)\n            .classes(\"w-full\")\n            .props(f\"input-class={classes}\")\n            .props(\"clearable\")\n        )\n        return textarea\n\n    def on_parse(self):\n        \"\"\"Handle parse button click\"\"\"\n        try:\n            with self.result_row:\n                self.json_code.content = \"\"\n                self.error_view.content = \"\"\n                mbus_hex_str = self.hex_input.value\n                error_msg, frame = self.parse_mbus_frame(mbus_hex_str)\n                if error_msg:\n                    self.error_view.content = f\"{error_msg}\"\n                else:\n                    json_str = self.get_frame_json(frame)\n                    self.json_code.content = json_str\n        except Exception as ex:\n            self.solution.handle_exception(ex)\n\n    def on_example_change(self):\n        \"\"\"Handle example selection change\"\"\"\n\n        selected = self.example_select.value\n        if selected in self.examples:\n            example = self.examples[selected]\n            self.hex_input.value = example.hex\n            self.example_details.content = example.as_html()\n            self.on_parse()\n\n    def setup_ui(self):\n        \"\"\"Create the NiceGUI user interface\"\"\"\n        ui.label(\"M-Bus Message Parser\").classes(\"text-h4 q-mb-md\")\n\n        self.example_select = ui.select(\n            label=\"Select Example\",\n            options=list(self.examples.keys()),\n            on_change=self.on_example_change,\n        ).classes(\"w-full q-mb-md\")\n\n        self.example_details = ui.html().classes(\"w-full mb-4\")\n\n        self.hex_input = self.createTextArea(\n            label=\"Enter M-Bus hex message\",\n            placeholder=\"e.g. 68 4d 4d 68 08 00 72 26 54 83 22 77...\",\n            classes=\"h-32\",\n        )\n\n        with ui.row() as self.button_row:\n            ui.button(\"Parse Message\", on_click=self.on_parse).classes(\"q-mt-md\")\n        with ui.row() as self.result_row:\n            self.error_view = ui.html()\n            self.json_code = ui.code(language=\"json\").classes(\"w-full h-96 q-mt-md\")\n</code></pre>"},{"location":"#mbusread.mbus_viewer.MBusViewer.createTextArea","title":"<code>createTextArea(label, placeholder=None, classes='h-64')</code>","text":"<p>Create a standardized textarea with common styling</p> Source code in <code>mbusread/mbus_viewer.py</code> <pre><code>def createTextArea(self, label, placeholder=None, classes: str = \"h-64\"):\n    \"\"\"Create a standardized textarea with common styling\"\"\"\n    textarea = (\n        ui.textarea(label=label, placeholder=placeholder)\n        .classes(\"w-full\")\n        .props(f\"input-class={classes}\")\n        .props(\"clearable\")\n    )\n    return textarea\n</code></pre>"},{"location":"#mbusread.mbus_viewer.MBusViewer.on_example_change","title":"<code>on_example_change()</code>","text":"<p>Handle example selection change</p> Source code in <code>mbusread/mbus_viewer.py</code> <pre><code>def on_example_change(self):\n    \"\"\"Handle example selection change\"\"\"\n\n    selected = self.example_select.value\n    if selected in self.examples:\n        example = self.examples[selected]\n        self.hex_input.value = example.hex\n        self.example_details.content = example.as_html()\n        self.on_parse()\n</code></pre>"},{"location":"#mbusread.mbus_viewer.MBusViewer.on_parse","title":"<code>on_parse()</code>","text":"<p>Handle parse button click</p> Source code in <code>mbusread/mbus_viewer.py</code> <pre><code>def on_parse(self):\n    \"\"\"Handle parse button click\"\"\"\n    try:\n        with self.result_row:\n            self.json_code.content = \"\"\n            self.error_view.content = \"\"\n            mbus_hex_str = self.hex_input.value\n            error_msg, frame = self.parse_mbus_frame(mbus_hex_str)\n            if error_msg:\n                self.error_view.content = f\"{error_msg}\"\n            else:\n                json_str = self.get_frame_json(frame)\n                self.json_code.content = json_str\n    except Exception as ex:\n        self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#mbusread.mbus_viewer.MBusViewer.setup_ui","title":"<code>setup_ui()</code>","text":"<p>Create the NiceGUI user interface</p> Source code in <code>mbusread/mbus_viewer.py</code> <pre><code>def setup_ui(self):\n    \"\"\"Create the NiceGUI user interface\"\"\"\n    ui.label(\"M-Bus Message Parser\").classes(\"text-h4 q-mb-md\")\n\n    self.example_select = ui.select(\n        label=\"Select Example\",\n        options=list(self.examples.keys()),\n        on_change=self.on_example_change,\n    ).classes(\"w-full q-mb-md\")\n\n    self.example_details = ui.html().classes(\"w-full mb-4\")\n\n    self.hex_input = self.createTextArea(\n        label=\"Enter M-Bus hex message\",\n        placeholder=\"e.g. 68 4d 4d 68 08 00 72 26 54 83 22 77...\",\n        classes=\"h-32\",\n    )\n\n    with ui.row() as self.button_row:\n        ui.button(\"Parse Message\", on_click=self.on_parse).classes(\"q-mt-md\")\n    with ui.row() as self.result_row:\n        self.error_view = ui.html()\n        self.json_code = ui.code(language=\"json\").classes(\"w-full h-96 q-mt-md\")\n</code></pre>"},{"location":"#mbusread.mbus_viewer_cmd","title":"<code>mbus_viewer_cmd</code>","text":"<p>Created on 2025-01-22</p> <p>@author: wf</p>"},{"location":"#mbusread.mbus_viewer_cmd.NiceMBusCmd","title":"<code>NiceMBusCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>command line handling for ngwidgets</p> Source code in <code>mbusread/mbus_viewer_cmd.py</code> <pre><code>class NiceMBusCmd(WebserverCmd):\n    \"\"\"\n    command line handling for ngwidgets\n    \"\"\"\n\n    def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        override the default argparser call\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n        parser.add_argument(\n            \"-rp\",\n            \"--root_path\",\n            default=MBusExamples.examples_path(),\n            help=\"path to mbux hex files [default: %(default)s]\",\n        )\n        return parser\n</code></pre>"},{"location":"#mbusread.mbus_viewer_cmd.NiceMBusCmd.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>override the default argparser call</p> Source code in <code>mbusread/mbus_viewer_cmd.py</code> <pre><code>def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    override the default argparser call\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n    parser.add_argument(\n        \"-rp\",\n        \"--root_path\",\n        default=MBusExamples.examples_path(),\n        help=\"path to mbux hex files [default: %(default)s]\",\n    )\n    return parser\n</code></pre>"},{"location":"#mbusread.mbus_viewer_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>mbusread/mbus_viewer_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = NiceMBusCmd(\n        config=NiceMBusWebserver.get_config(),\n        webserver_cls=NiceMBusWebserver,\n    )\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#mbusread.mbus_viewer_server","title":"<code>mbus_viewer_server</code>","text":"<p>Created on 22.01.2025</p> <p>@author: wf</p>"},{"location":"#mbusread.mbus_viewer_server.NiceMBus","title":"<code>NiceMBus</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> Source code in <code>mbusread/mbus_viewer_server.py</code> <pre><code>class NiceMBus(InputWebSolution):\n    \"\"\" \"\"\"\n\n    def __init__(self, webserver: \"NiceMBusWebserver\", client: Client):\n        super().__init__(webserver, client)\n\n    async def home(self):\n        \"\"\"\n        provide the main content page\n        \"\"\"\n\n        def setup_home():\n            viewer = MBusViewer(solution=self)\n            viewer.setup_ui()\n\n        await self.setup_content_div(setup_home)\n</code></pre>"},{"location":"#mbusread.mbus_viewer_server.NiceMBus.home","title":"<code>home()</code>  <code>async</code>","text":"<p>provide the main content page</p> Source code in <code>mbusread/mbus_viewer_server.py</code> <pre><code>async def home(self):\n    \"\"\"\n    provide the main content page\n    \"\"\"\n\n    def setup_home():\n        viewer = MBusViewer(solution=self)\n        viewer.setup_ui()\n\n    await self.setup_content_div(setup_home)\n</code></pre>"},{"location":"#mbusread.mbus_viewer_server.NiceMBusWebserver","title":"<code>NiceMBusWebserver</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>webserver to demonstrate ngwidgets capabilities</p> Source code in <code>mbusread/mbus_viewer_server.py</code> <pre><code>class NiceMBusWebserver(InputWebserver):\n    \"\"\"\n    webserver to demonstrate ngwidgets capabilities\n    \"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2025 Wolfgang Fahl\"\n        config = WebserverConfig(\n            short_name=\"mbus_viewer\",\n            timeout=6.0,\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9853,\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = NiceMBus\n        return server_config\n\n    def __init__(self):\n        \"\"\"\n        Constructor\n        \"\"\"\n        InputWebserver.__init__(self, config=NiceMBusWebserver.get_config())\n        pass\n\n    def configure_run(self):\n        root_path = (\n            self.args.root_path if self.args.root_path else MBusExamples.examples_path()\n        )\n        self.root_path = os.path.abspath(root_path)\n        self.allowed_urls = [\n            \"https://raw.githubusercontent.com/WolfgangFahl/nicescad/main/examples/\",\n            \"https://raw.githubusercontent.com/openscad/openscad/master/examples/\",\n            self.root_path,\n        ]\n</code></pre>"},{"location":"#mbusread.mbus_viewer_server.NiceMBusWebserver.__init__","title":"<code>__init__()</code>","text":"<p>Constructor</p> Source code in <code>mbusread/mbus_viewer_server.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Constructor\n    \"\"\"\n    InputWebserver.__init__(self, config=NiceMBusWebserver.get_config())\n    pass\n</code></pre>"},{"location":"#mbusread.version","title":"<code>version</code>","text":"<p>Created on 22.01.2025</p> <p>@author: wf</p>"},{"location":"#mbusread.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>Version handling for nicegui widgets</p> Source code in <code>mbusread/version.py</code> <pre><code>@dataclass\nclass Version:\n    \"\"\"\n    Version handling for nicegui widgets\n    \"\"\"\n\n    name = \"mbusreader\"\n    version = mbusread.__version__\n    date = \"2025-01-22\"\n    updated = \"2025-01-22\"\n    description = \"MBus message parser and JSON result viewer\"\n\n    authors = \"Wolfgang Fahl\"\n\n    doc_url = \"https://wiki.bitplan.com/index.php/MBus_Reader\"\n    chat_url = \"https://github.com/WolfgangFahl/mbusreader/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/mbusreader\"\n\n    license = f\"\"\"Copyright 2025 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"}]}